import streamlit as st

def show():
    # 仕様書ページの内容
    st.title("仕様書")
    st.write("""
    ## 構成

    - 以下の4つで構成されています。1~4を順番に実行することで、Reaxtionは動作しています。

    ```json
    Coding:{
      "name": "test", // トレーニングメニュー名
      "program": [
        {
          "order": 0, // 1.開く
        },
        {
          "order": 1, // 2.待つ
        },
        {
          "order": 2, // 3.次の点灯までの時間
        },
        {
          "order": 3, // 4.閉じる
        }
      ],
      "limit_time": "∞" // 制限時間
    }
    ```

    ## A. 順番に消す

    ### *1.開く*

    - ターゲットを点灯させる設定を行う。

    ```shell
    - numbers: ターゲット数または回数 (1~12, all)
    - random: ランダム設定 (0: off, 1: on)
    - colors: 色設定 (0: 赤, 1: 青, 2: 緑, 3: 黄, 4: 紫, 5: オレンジ)
    - onbeeper: 点灯音 (0: off, 1: on)
    - offbeeper: 反応音 (0: off, 1: on)
    - sensor: センサー設定 (0: センサー(近距離), 1: センサー(遠距離), 2: タッチ(敏感), 3: タッチ(鈍感))
    - flash: 点灯設定 (0: off, 1: on)
    ```

    ### *2.待つ*

    - ターゲットが点灯してから消灯するまでの時間を設定できる

    ```shell
    - logic: ロジック設定(時間設定の有効化) (0: off, 1: on)
    - timeout: タイムアウト設定 (✖️, 0.4~30秒)
    ```

    ### *3.次の点灯までの時間*

    - ユーザーが消したあと、次の点灯までの時間を設定する。
    - 最小値から最大値までのランダムな時間を設定することもできる。

    ```shell
    - delay1: 最短 (0, 3, 5, 10秒)
    - delay2: 最長 (0.1~10秒)
    ```

    ### *4.閉じる*

    - ターゲットを消灯させる設定を行う。

    ```
    - numbers: ターゲット数または回数 (1~12, all)
    - random: ランダム設定(???) (0: off, 1: on)
    ```

    ## 制限時間

    - トレーニングの制限時間を設定する。

    ```
    - limit_time: 制限時間 (∞, 10秒~10分)
    ```

    ## B. to be contenue

    # 今後

    - 他のトレーニングの仕様の調査を行う(連続で光らせるなど)

    """)



show()



